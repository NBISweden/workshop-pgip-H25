<!-- markdownlint-disable MD041 -->

```{r}
#| label: r-libs-init
#| echo: false
#| eval: true
#| cache: false
#| warning: false
library(pgip)
library(tidyr)
library(dplyr)
library(ggplot2)
library(scales)
library(viridis)
bw <- theme_bw(base_size = 18) %+replace%
  theme(axis.text.x = element_text(
    angle = 45, hjust = 1, vjust = 1
  ))
theme_set(bw)
```

```{r }
#| label: read-tool-config
#| echo: false
#| eval: true
#| warning: false
#| cache: false
library(blogdown)
library(here)
library(yaml)
deps <- blogdown::read_toml(here("pixi.toml"))$feature$build$dependencies
x <- yaml::read_yaml(here("exercises", "_tools.yaml"))
tools <- lapply(names(x), function(n){
  x[[n]]$pixi <- deps[[n]]; x[[n]]}
  )
names(tools) <- names(x)
exercise_tools <- yaml::read_yaml(here("_variables.yml"))$exercises
```

```{r }
#| label: r-format-tools-functions
#| echo: false
#| eval: true
#| warning: false
#| cache: false
format_listing <- function(tool_list) {
  output <- ""
  for (n in tool_list) {
    tool <- tools[[n]]
    if (!is.null(tool$name))
      n <- tool$name
    entry <- paste0("- [", n, "](", tool$url, ")")
    if (!is.null(tool$ref))
      entry <- paste0(entry, " [@", tool$ref, "]")
    output <- paste0(output, entry, "\n")
  }
  return(output)
}
format_modules <- function(tool_list, bioinfo_tools=FALSE) {
  msg <- "module load"
  if (bioinfo_tools)
    msg <- paste0(msg, " bioinfo-tools")
  missing <- c()
  count <- 0
  for (n in tool_list) {
    tool <- tools[[n]]
    if (!is.null(tool$pdc)) {
      if ((count %% 3) == 0)
        msg <- paste0(msg, " \\ \n   ")
      entry <- paste0(" ", tool$pdc)
      msg <- paste0(msg, entry)
      count <- count + 1
    } else {
      missing <- c(missing, n)
    }
  }
  output <- paste0(
      "<div class=\"sourceCode\">",
      "<pre class=\"sourceCode bash code-with-copy\">",
      "<code class=\"sourceCode bash\">"
  )
  if (length(missing) > 0) {
    output <- paste0(output, "# NB: the following tools are not available as modules:\n")
    for (n in missing)
      output <- paste0(output, "# - ", n, "\n")
  }
  output <- paste0(output, msg, "\n</code></pre></div>\n")
  return(output)
}
format_pixi <- function(tool_list, ename) {
  output <- paste0(
      "<div class=\"sourceCode cell-code\">",
      "<pre class=\"sourceCode toml code-with-copy\">",
      "<code class=\"sourceCode toml\">"
  )
  output <- paste0(
      output, "[workspace]\n",
      "channels = [\"conda-forge\", \"bioconda\"]\n",
      "name = \"", ename, "\"\n",
      "\n[dependencies]\n"
  )
  for (n in tool_list) {
    tool <- tools[[n]]
    if (!is.null(tool$pixi)) {
      entry <- paste0(n, " = \"", tool$pixi, "\"")
      output <- paste0(output, entry, "\n")
    }
  }
  output <- paste0(output, "\n</code></pre></div>\n")
  return(output)
}
```

<!-- markdownlint-enable MD041 -->
