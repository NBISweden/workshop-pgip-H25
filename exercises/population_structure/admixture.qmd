---
title: Admixture
description: >-
  Infer populations and individual ancestries
author:
  - Per Unneberg
format:
  nbis-course-html:
    number-sections: false
exercise:
  dir: population-structure
  venv: e-population-structure
  data: monkeyflower/selection/large/vcftools-filter-bqsr/
  wget_opts: \-\-accept-regex all.variantsites* \-\-cut-dirs=7
---

<!-- markdownlint-disable MD041 -->

{{< include /exercises/_knitr.qmd >}}

{{< include /exercises/_rbuild.qmd >}}

{{< include /exercises/_rlibs.qmd >}}

```{r }
#| label: r-init-vars
#| echo: false
#| eval: true
obj <- exercise_tools$population_structure$admixture
```

<!-- markdownlint-enable MD041 -->

# About

Admixture models model the ancestry components of a set of samples,
where the ancestry components consist of a pre-defined number of
(source) populations. In this exercise, we will use the software {{<
var tools.admixture.fmt >}} [@alexander_FastModelbasedEstimation_2009] to model
ancestry.

{{< include /exercises/_subset.qmd >}}

:::{.callout-tip collapse=true}

## Intended learning outcomes

- run {{< var tools.admixture.fmt >}} to infer population structure and
  individual ancestries

:::

{{< include /exercises/_tools.qmd >}}

{{< include /exercises/_datasetup.qmd >}}

## Admixture

Although clustering methods like Principal Component Analysis (PCA)
cluster individuals, they provide limited information regarding the
compositional makeup of genomes. Admixture modelling involves
analyzing ancestry from multiple source populations, where individual
allele frequency (P) is a mixture (Q) of source population Ps. Two
approaches to this include estimating P from known populations and
using the STRUCTURE tool, which applies Bayesian estimations directly
from 'G' as proposed by
[@pritchard_InferencePopulationStructure_2000]. Ancestry is
essentially the proportion of a genome sourced from specified groups
or populations. The Admixture tool
[@alexander_FastModelbasedEstimation_2009] is another method used to
estimate ancestry components from genotypes based on maximum
likelihood. Its development was primarily motivated by the need to
address population stratification, a common confounding factor in
association studies.

In this exercise, you will use Admixture to estimate ancestry
components in Monkeyflower.

## Data setup

We start by defining some variables. Note that {{< var tools.admixture.fmt >}}
assumes indpendence among markers, which means we must first perform
LD pruning. Follow the steps in the [PCA](pca.qmd) to generate the
input file `monkeyflower_pca.prune.in` defined below.

```{bash }
#| label: pca-set-envvars
#| echo: true
#| eval: true
#| cache: false
VCF=variants.vcf.gz
PRUNE_IN=monkeyflower_pca.prune.in
DATAPFX=monkeyflower_adm
```

```{r }
#| label: setenv
#| echo: false
#| eval: true
#| cache: false
Sys.setenv(
    "VCF" = "variants.vcf.gz",
    "DATAPFX" = "monkeyflower_adm",
    "PRUNE_IN" = "monkeyflower_adm.prune.in"
)
```

## Running {{< var tools.admixture.fmt >}}

Given an appropriate input file, running {{< var tools.admixture.fmt >}} can be
done in a few steps. {{< var tools.admixture.fmt >}} takes as input a [plink bed
(binary biallelic genotype table)
file](https://www.cog-genomics.org/plink/1.9/formats#bed), which we
generate with the option `--make-bed`:

```{bash }
#| label: run-plink-to-bed
#| echo: true
#| eval: true
plink2 --vcf $VCF --allow-extra-chr \
       --extract ${PRUNE_IN} \
       --set-missing-var-ids @:# \
       --make-bed \
       --out ${DATAPFX} > /dev/null 2>&1
```

This command will generate three output files:

- `monkeyflower_adm.bed` -- file containing representation of genotype
  calls at biallelic variants
- `monkeyflower_adm.bim` -- a map file which is a table of the
  markers, their positions, and the alleles
- `monkeyflower_adm.fam` -- a sample information file

Before running {{< var tools.admixture.fmt >}}, we need to modify the map file
such that chromosome names are integers and not as now prefixed with
`LG`.

```{bash }
#| label: sed-change-chromosome-name
#| echo: true
#| eval: true
# ADMIXTURE only accepts integer chromosome names
sed -i -e "s/^\([A-Z0-9][A-Z0-9]*\)/0/g" ${DATAPFX}.bim
```

That is all we have to do! We next run {{< var tools.admixture.fmt >}} with
cross-validation (default is 5-fold CV) and set the number of
populations `K=2`:

```{bash }
#| label: admixture-k-2
#| echo: true
#| eval: false
admixture --cv ${DATAPFX}.bed 2 > ${DATAPFX}.2.log
```

The output is two files: `.Q` consists of two columns with cluster
assignments for each individual, whereas `.P` is the population allele
frequencies. We want to compare models with different settings for the
number of populations `K` so we run a for loop from 3 to 10:

```{bash }
#| label: admixture-k-loop
#| echo: true
#| eval: false
for k in {3..10}
do
    admixture --cv ${DATAPFX}.bed $k > ${DATAPFX}.${k}.log
done
```

Each run has generated a cross validation error. We want to select the
model with the smallest error and therefore extract and save the CV
errors into an output file:

```{bash }
#| label: extract-cv-error
#| echo: true
#| eval: true
grep CV *log | cut -d " " -f 3,4 | sed -e "s/[()K=:]//g" > ${DATAPFX}.cv.err
```

## R analyses

Now that we have the output data we turn to plotting the results in R.
First load the necessary packages:

```{r }
#| label: r-library-init
#| echo: true
#| eval: true
#| warning: false
{{< include /exercises/_rlibs.R >}}
library(dplyr)
library(tibble)
library(RColorBrewer)

DATAPFX <- "monkeyflower_adm"
```

```{r }
#| label: set-hidden-prefix
#| echo: false
#| eval: true
DATAPFX <- "monkeyflower_adm.save"
```

Next, we plot the CV errors.

```{r }
#| label: plot-cv-error
#| echo: true
#| eval: true
df <- read.table(paste0(DATAPFX, ".cv.err"))
colnames(df) <- c("K", "CV")
ggplot(df, aes(x=K, y=CV)) + geom_point() + ylab("CV error")
```

Here, we look for the lowest value of `K`, which for this example is 4
(NB: this may differ from your results since this is based on a
smaller dataset!).

```{r }
#| label: reset-hidden-prefix
#| echo: false
#| eval: true
DATAPFX <- "monkeyflower_adm"
```

Now we can plot the admixture proportions. Before doing so, we add
sample population information to the plink sample information file
(`.fam`):

```{r }
#| label: load-sampleinfo-join-fam
#| echo: true
#| eval: true
sampleinfo <- read.csv("sampleinfo.csv") %>% rename(sample=SampleAlias) %>%
  mutate(species = as.factor(gsub("ssp. ", "", Taxon))) %>%
  select(sample, ScientificName, Taxon, Latitude, Longitude, species) %>%
  as_tibble
fam <- read.table(paste0(DATAPFX, ".fam")) %>% select(2) %>%
  rename(sample=V2) %>% right_join(sampleinfo) %>% as_tibble
head(fam)
```

```{r }
#| label: set-hidden-prefix2
#| echo: false
#| eval: true
DATAPFX <- "monkeyflower_adm.save"
```

Finally, we define a function to plot the admixture proportions.
Without going into too much detail, the code below groups samples by
populations in a "facet_grid" to facilitate interpretation.

```{r }
#| label: plot-admixture-function
#| echo: true
#| eval: true
plot_admixture <- function(filename, fam) {
  df <- read.table(filename) %>%
    rename_with(~ paste0("pop", seq_along(.))) %>%
    mutate(sample=fam$sample) %>% left_join(fam) %>%
    pivot_longer(cols=starts_with("pop"), names_to="Population", values_to="Q") %>%
    mutate(across(Population, as.factor)) %>%
    as_tibble
  colors <- colorRampPalette(brewer.pal(12, "Set3"))(length(levels(df$Population)))
  p <- ggplot(df, aes(x=sample, y=Q, fill=factor(Population))) +
    geom_col(aes(color = Population), linewidth=0.1) +
    facet_grid(~species, switch = "x", scales = "free", space = "free") +
    labs(x="Individual", y="Q") +
    scale_y_continuous(expand = c(0, 0)) +
    scale_x_discrete(expand = expansion(add = 1)) +
    theme(
        panel.spacing.x = unit(0.1, "lines"),
        axis.text.x = element_text(angle=45),
        panel.grid = element_blank(),
        strip.text.x = element_text(angle=0)
    ) + scale_fill_manual("Population", values=colors)
  return(p)
}
```

We here include admixture plots for `K=2` and `K=4`.

```{r }
#| label: plot-admixture
#| echo: true
#| eval: true
#| warning: false
#| fig-width: 16
plot_admixture(paste0(DATAPFX, ".2.Q"), fam)
plot_admixture(paste0(DATAPFX, ".4.Q"), fam)
```

It is important not to overinterpret admixture plots
[@lawson_TutorialHowNot_2018], mainly due to the fact that different
demographic histories can lead to the same result. The plots are good
for detecting recent hybrid events, but fall short for inference of
more complex demographic histories.

Also remember that different runs of {{< var tools.admixture.fmt >}} will
generate different results because the initial mixing parameters are
chosen at random. There are several methods for evaluating the
robustness of the results, including Pong
[@behr_PongFastAnalysis_2016], Clumpak
[@kopelman_ClumpakProgramIdentifying_2015] and evaladmix
[@garcia-erill_EvaluationModelFit_2020].

## Things to try

If you have more time over, make some more plots with different values
of `K`. Do the results make sense?

## References
