---
title: Data quality control
description: >-
  Introduction to the command line interface. Preparation of data,
  raw data quality control and filtering for downstream analyses.
author:
  - Per Unneberg
format: nbis-course-html
execute:
  cache: false
exercise:
  dir: variant-calling
  venv: e-variant-calling
  data: monkeyflower/variant-calling/
  wget_opts: \-\-cut-dirs=5
---

<!-- markdownlint-disable MD041 -->

{{< include /exercises/_knitr.qmd >}}

{{< include /exercises/_rbuild.qmd >}}

{{< include /exercises/_rlibs.qmd >}}

{{< include _init_data.qmd >}}

```{r }
#| label: r-init-vars
#| echo: false
#| eval: true
obj <- exercise_tools$variant_calling$data_qc
```

<!-- markdownlint-enable MD041 -->

In this exercise we will familiarize ourselves with the command line
and compile some basic quality statistics from raw sequence data
files.

::: {.callout-note}

This is a technical exercise, where the focus is not so much on the
biology as on getting programs to run and interpreting the output.

:::

{{< include /exercises/_subset.qmd >}}

::: {.callout-tip collapse=true}

## Intended learning outcomes

- Run `fastqc` from command line
- Perform qc on sequencing reads and interpret results

:::

{{< include /exercises/_tools.qmd >}}

{{< include /exercises/_datasetup.qmd >}}

## Preparation: reference sequence index and read QC

Prior to mapping we need to create a database index. We also generate
a fasta index and a sequence dictionary for use with the `picard`
toolkit.

```{bash }
#| label: samtools-faidx
#| echo: true
#| eval: true
#| results: hide
samtools faidx ref/M_aurantiacus_v1.fasta
picard CreateSequenceDictionary --REFERENCE ref/M_aurantiacus_v1.fasta
bwa index ref/M_aurantiacus_v1.fasta
```

With the program `fastqc` we can generate quality control reports for
all input `FASTQ` files simultaneously, setting the output directory
with the `-o` flag:

```{bash }
#| label: fastqc-red
#| echo: true
#| eval: true
#| results: hide
# Make fastqc output directory; --parents makes parent directories as
# needed
mkdir --parents fastqc
fastqc --outdir fastqc fastq/*fastq.gz
```

::: {.callout-exercise}

`cd` to the output directory and look at the `html` reports. Do you
notice any difference between read 1 (R1) and read 2 (R2)?

::: {.callout-answer}

```{bash }
#| label: fastqc-exercise-answer
#| echo: true
#| eval: false
cd fastqc
open PUN-Y-INJ_R1_fastqc.html
open PUN-Y-INJ_R2_fastqc.html
```

The traffic light summary indicates whether a given quality metric has
passed or not. Typically, read 2 has slightly lower quality and more
quality metrics with warnings. Since these reads have been deposited
in the [Sequence Read Archive](https://www.ncbi.nlm.nih.gov/sra)
(SRA), it is likely they were filtered prior to upload, and we will
not take any further action here.

:::

:::

We will use `MultiQC` later on to combine the results from several
output reports.
