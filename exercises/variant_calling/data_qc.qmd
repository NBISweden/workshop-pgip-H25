---
title: Data quality control
author:
  - Per Unneberg
format: nbis-course-html
execute:
  cache: false
---

<!-- markdownlint-disable MD041 -->

{{< include ../_knitr.qmd >}}

{{< include ../_rlibs.qmd >}}

{{< include _init_data.qmd >}}

<!-- markdownlint-enable MD041 -->

::: {.callout-important collapse=true}

#### {{< fa server >}} Compute environment setup

If you haven't already done so, please read [Compute
environment](../compute_environment/index.qmd) for information on how
to prepare your working directory.

:::

In this exercise we will familiarize ourselves with the command line
and compile some basic quality statistics from raw sequence data
files.

::: {.callout-note}

This is a technical exercise, where the focus is not so much on the
biology as on getting programs to run and interpreting the output.

:::

::: {.callout-important}

The commands of this document have been run on a subset (a subregion)
of the data. Therefore, although you will use the same commands, your
results will differ from those presented here.

:::

::: {.callout-tip collapse=true}

## Learning objectives

- Get familiar with command line
- Perform qc on sequencing reads and interpret results

:::

::: {.callout-note collapse=true}

## Tools

:::{.panel-tabset}

#### Listing

- [bwa](https://github.com/lh3/bwa) [@li_AligningSequenceReads_2013]
- [picard](https://github.com/broadinstitute/picard) [@Picard2019toolkit]
- [samtools](https://github.com/samtools/samtools) [@danecek_TwelveYearsSAMtools_2021]

#### {{< fa server >}} PDC

Choose **one** of **Modules** and **Virtual environment** to access
relevant tools.

##### Modules

Execute the following command to load modules:

```{bash }
#| label: pdc-load-modules
#| echo: true
#| eval: false
module load bwa/0.7.18 picard/3.3.0 samtools/1.20
```

##### Virtual environment

Activate the `e-variant-calling` environment:

```bash
# $OPTIONS is provided via the init script
pixi shell -e e-variant-calling $OPTIONS
```

#### {{< fa laptop >}} pixi

Copy the contents to a file `pixi.toml` in directory
`variant-calling`, `cd` to directory and activate environment with
`pixi shell`. If `variant-calling/pixi.toml` already exists, simply
add the three dependencies to the `[dependencies]` section and run
`pixi update`.

```{lang="text" }
[workspace]
channels = ["conda-forge", "bioconda"]
name = "variant-calling"

[dependencies]
bwa = ">=0.7.19,<0.8"
picard = ">=3.4.0,<4"
samtools = ">=1.22.1,<2"
```

:::

:::

## Preparation: reference sequence index and read QC

Prior to mapping we need to create a database index. We also generate
a fasta index and a sequence dictionary for use with the `picard`
toolkit.

```{bash }
#| label: samtools-faidx
#| echo: true
#| eval: true
#| results: hide
samtools faidx ref/M_aurantiacus_v1.fasta
picard CreateSequenceDictionary --REFERENCE ref/M_aurantiacus_v1.fasta
bwa index ref/M_aurantiacus_v1.fasta
```

With the program `fastqc` we can generate quality control reports for
all input `FASTQ` files simultaneously, setting the output directory
with the `-o` flag:

```{bash }
#| label: fastqc-red
#| echo: true
#| eval: true
#| results: hide
# Make fastqc output directory; --parents makes parent directories as
# needed
mkdir --parents fastqc
fastqc --outdir fastqc fastq/*fastq.gz
```

::: {.callout-exercise}

`cd` to the output directory and look at the `html` reports. Do you
notice any difference between read 1 (R1) and read 2 (R2)?

::: {.callout-answer}

```{bash }
#| label: fastqc-exercise-answer
#| echo: true
#| eval: false
cd fastqc
open PUN-Y-INJ_R1_fastqc.html
open PUN-Y-INJ_R2_fastqc.html
```

The traffic light summary indicates whether a given quality metric has
passed or not. Typically, read 2 has slightly lower quality and more
quality metrics with warnings. Since these reads have been deposited
in the [Sequence Read Archive](https://www.ncbi.nlm.nih.gov/sra)
(SRA), it is likely they were filtered prior to upload, and we will
not take any further action here.

:::

:::

We will use `MultiQC` later on to combine the results from several
output reports.
